//----------------------------------------------------------
//0~59 sec & minute counter 0~23 hour counter
//----------------------------------------------------------
module	hour_min_sec(	rst_n,
			o_hour,
			o_min,
			o_sec,
			clk);

input	clk			;
input	rst_n			;
output	[4:0]	o_hour		;
output	[5:0]	o_min, o_sec	;

reg	[4:0]	o_hour		;
reg	[5:0]	o_min, o_sec	;

//for sec
always @(posedge clk or negedge rst_n) begin
	if(rst_n == 1'd0) begin						//sec reset
		o_sec	<=	6'd0;
	end else begin
		if(o_sec >= 6'd59) begin				//sec set 0~59
			o_sec 	<=	6'd0;
		end else begin
			o_sec 	<=	o_sec + 1'd1;			//sec grow
		end
	end
end
//for min
always @(posedge clk or negedge rst_n) begin
	if(rst_n == 0) 
		o_min	<=	6'd0;					//min reset
	else
		if(o_sec >= 6'd59)
			if (o_min >= 6'd59)
				o_min	<=	6'd0;   		//min set 0~59
			else
				o_min	<=	o_min + 1'd1;		//min grow
end	

//for hour
always @(posedge clk or negedge rst_n) begin
	if(rst_n == 0)
		o_hour	<=	5'd0;					//hour reset
	else
		if(o_sec >= 6'd59)
			if (o_min >= 6'd59)
				if (o_hour >=5'd23)			//hour set 0~23
					o_hour	<=	o_hour + 5'd0;
				else
					o_hour	<=	o_hour + 1'd1;	//hour grow
end 
endmodule
//	--------------------------------------------------
//	Numerical Controlled Oscillator
//	Hz of o_gen_clk = Clock Hz / num
//	--------------------------------------------------
module	nco(	o_gen_clk,
		i_nco_num,
		clk,
		rst_n);

output		o_gen_clk	;	// 1Hz CLK

input	[31:0]	i_nco_num	;	//50Mhz
input		clk		;	// 50Mhz CLK
input		rst_n		;


reg	[31:0]	cnt		;
reg		o_gen_clk	;
always @(posedge clk or negedge rst_n) begin
	if(rst_n == 1'd0) begin
		cnt		<= 32'd0	;
		o_gen_clk	<= 1'd0		;
	end else begin
		if(cnt >= i_nco_num/2-1) begin
			cnt 		<= 32'd0	;
			o_gen_clk	<= ~o_gen_clk	;
		end else begin
			cnt <= cnt + 1'd1	;
		end
	end
end

endmodule

//	--------------------------------------------------
//	NCO Clock Based 0~59 Counter
//	--------------------------------------------------
module	nco_cnt(	o_nco_cnt59,
			o_nco_cnt23,
			i_nco_num,
			clk,
			rst_n);

output	[5:0]	o_nco_cnt59	;
output	[4:0]	o_nco_cnt23	;

input	[31:0]	i_nco_num	;
input		clk		;
input		rst_n		;

wire		gen_clk		;
nco		u_nco(		.o_gen_clk	( gen_clk	),
				.i_nco_num	( i_nco_num	),
				.clk		( clk		),
				.rst_n		( rst_n		));

hour_min_sec	u_hour_min_sec(		.rst_n	(rst_n		),
					.o_hour	(o_nco_cnt23	),
					.o_min	(o_nco_cnt59	),
					.o_sec	(o_nco_cnt59	),
					.clk	(gen_clk	));
endmodule

//	--------------------------------------------------
//	Flexible Numerical Display Decoder
//	--------------------------------------------------
module	fnd_dec(	o_seg,
			i_num);

output	[6:0]	o_seg	;	// {o_seg_a, o_seg_b, ... , o_seg_g}

input	[3:0]	i_num	;       //number 0~9

reg	[6:0] 	o_seg	;	

always @(i_num) begin
case({i_num})
	4'b0000 : o_seg = 7'b1111110	;
	4'b0001 : o_seg = 7'b0110000	;
	4'b0010 : o_seg = 7'b1101101	;
	4'b0011 : o_seg = 7'b1111001	;
	4'b0100 : o_seg = 7'b0110011	;
	4'b0101 : o_seg = 7'b1011011	;
	4'b0110 : o_seg = 7'b1011111	;
	4'b0111 : o_seg = 7'b1110000	;
	4'b1000 : o_seg = 7'b1110011	;
	4'b1001 : o_seg = 7'b1110011	;
	default : o_seg = 7'b0000000	;
endcase
end
endmodule

//	--------------------------------------------------
//	0~59 --> 2 Separated Segments (2sec/2min/2hour)
//	--------------------------------------------------
module	double_fig_sep(		o_hour10	,
				o_hour0	,
				o_min10	,
				o_min0	,
				o_sec10	,
				o_sec0	,
				i_double_fig59,
				i_double_fig23 );

output	[3:0]	o_hour10, o_hour0	;
output	[3:0]	o_min10, o_min0		;
output	[3:0]	o_sec10, o_sec0		;

input	[5:0]	i_double_fig59		;
input	[4:0]	i_double_fig23		;

reg	[3:0]	o_hour10, o_hour0	;
reg	[3:0]	o_min10, o_min0		;
reg	[3:0]	o_sec10, o_sec0		;

always @ ( * ) begin
	o_hour10	<=	i_double_fig23/10	;
	o_hour0		<=	i_double_fig23%10	;
	o_min10		<=	i_double_fig59/10	;
	o_min0		<=	i_double_fig59%10	;
	o_sec10		<=	i_double_fig59/10	;
	o_sec0		<=	i_double_fig59%10	;
end
endmodule

//	--------------------------------------------------
//	0~59 --> 2 Separated Segments
//	--------------------------------------------------
module	led_disp(	o_seg,
			o_seg_dp,
			o_seg_enb,
			i_six_digit_seg,
			i_six_dp,
			clk,
			rst_n);

output	[5:0]	o_seg_enb		;
output		o_seg_dp		;
output	[6:0]	o_seg			;

input	[41:0]	i_six_digit_seg		;
input	[5:0]	i_six_dp		;
input		clk			;
input		rst_n			;

wire		gen_clk			;
nco	u_nco(		.o_gen_clk	( gen_clk		),
			.i_nco_num	( 32'd50000		),
			.clk		( clk			),
			.rst_n		( rst_n			));

reg	[3:0]	cnt_common_node	;
always @(posedge gen_clk or negedge rst_n) begin
	if(rst_n == 1'b0) begin
		cnt_common_node	<= 32'd0	;
	end else begin
		if(cnt_common_node >= 4'd5) begin
			cnt_common_node <= 4'd0	;
		end else begin
			cnt_common_node <= cnt_common_node + 1'b1	;
		end
	end
end

reg	[5:0]	o_seg_enb	;
always @(cnt_common_node) begin
	case (cnt_common_node)
		4'd0 : o_seg_enb = 6'b111110	;
		4'd1 : o_seg_enb = 6'b111101	;
		4'd2 : o_seg_enb = 6'b111011	;
		4'd3 : o_seg_enb = 6'b110111	;
		4'd4 : o_seg_enb = 6'b101111	;
		4'd5 : o_seg_enb = 6'b011111	;
	endcase
end

reg	o_seg_dp	;
always @(cnt_common_node) begin
	case (cnt_common_node)
		4'd0 : o_seg_dp = i_six_dp[0]	;
		4'd1 : o_seg_dp = i_six_dp[1]	;
		4'd2 : o_seg_dp = i_six_dp[2]	;
		4'd3 : o_seg_dp = i_six_dp[3]	;
		4'd4 : o_seg_dp = i_six_dp[4]	;
		4'd5 : o_seg_dp = i_six_dp[5]	;
	endcase
end

reg	[6:0]	o_seg	;
always @(cnt_common_node) begin
	case (cnt_common_node)
		4'd0 : o_seg = i_six_digit_seg[6:0]	;
		4'd1 : o_seg = i_six_digit_seg[13:7]	;
		4'd2 : o_seg = i_six_digit_seg[20:14]	;
		4'd3 : o_seg = i_six_digit_seg[27:21]	;
		4'd4 : o_seg = i_six_digit_seg[34:28]	;
		4'd5 : o_seg = i_six_digit_seg[41:35]	;
	endcase
end
endmodule

//	--------------------------------------------------
//	Top Module
//	--------------------------------------------------
module	top_nco_cnt_disp(	o_seg_enb,
				o_seg_dp,
				o_seg,
				clk,
				rst_n);

output	[5:0]	o_seg_enb	;
output		o_seg_dp	;
output	[6:0]	o_seg		;

input		clk		;
input		rst_n		;

wire	[5:0]	nco_cnt59;
wire	[4:0]	nco_cnt23;
nco_cnt		u_nco_cnt(	o_nco_cnt59	(nco_cnt59	),
				o_nco_cnt23	(nco_cnt23	),
				i_nco_num	(32'd50000000	),
				clk		(clk		),
				rst_n		(rst_n		));
	
wire	[3:0]	hour10		;
wire	[3:0]	hour0		;
wire	[3:0]	min10		;
wire	[3:0]	min0		;
wire	[3:0]	sec10		;
wire	[3:0]	sec0		;
double_fig_sep		u_double_fig_sep(	.o_hour10	(hour10	  ),
						.o_hour0	(hour0	  ),
						.o_min10	(min10	  ),
						.o_min0		(min0	  ),
						.o_sec10	(sec10	  ),
						.o_sec0		(sec0	  ),
						.i_double_fig59	(nco_cnt59),
						.i_double_fig23	(nco_cnt23));
wire	[6:0]	Hour10		;
wire	[6:0]	Hour0		;
wire	[6:0]	Min10		;
wire	[6:0]	Min0		;
wire	[6:0]	Sec10		;
wire	[6:0]	Sec0		;
fnd_dec		u0_fnd_dec(	.o_seg(Hour10	),
				.i_num(hour10	));

fnd_dec		u1_fnd_dec(	.o_seg(Hour0	),
				.i_num(hour0	));

fnd_dec		u2_fnd_dec(	.o_seg(Min10	),
				.i_num(min10	));

fnd_dec		u3_fnd_dec(	.o_seg(Min0	),
				.i_num(min0	));

fnd_dec		u4_fnd_dec(	.o_seg(Sec10	),
				.i_num(sec10	));

fnd_dec		u5_fnd_dec(	.o_seg(Sec0	),
				.i_num(sec0	));
wire	[41:0]	mix	;
assign	mix = { Hour10, Hour0, Min10, Min0, Sec10, Sec0 };
led_disp	u0_led_disp(	.o_seg		(o_seg		),
				.o_seg_dp	(o_seg_dp	),
				.o_seg_enb	(o_seg_enb	),
				.i_six_digit_seg(mix		),
				.i_six_dp	(6'd0		),
				.clk		(clk		),
				.rst_n		(rst_n		));

endmodule
